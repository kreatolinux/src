.\" Automatically generated by Pandoc 2.9.2.1
.\"
.TH "kpkg_run" "8" "" "" ""
.hy
.SH NAME
.PP
kpkg runfile - main package format of kpkg
.SH DESCRIPTION
.PP
kpkg runfiles are the main package format of kpkg.
It is a basic shell script with some variables so kpkg can build the
package.
.SH RUNFILE STRUCTURE
.PP
Runfiles are just named \[lq]run\[rq] inside the package directory.
It is written in POSIX sh and doesn\[cq]t support any other languages.
.PP
An example runfile structure;
.IP
.nf
\f[C]
NAME=\[dq]test-v3\[dq]
VERSION=\[dq]0.0.1\[dq]
RELEASE=\[dq]1\[dq]
SOURCES=\[dq]https://test.file/source/testfile.tar.gz;git::https://github.com/kreatolinux/src::543ee30eda806029fa9ea16a1f9767eda7cab4d1\[dq]
DEPENDS=\[dq]testpackage1 testpackage3 testpackage4\[dq]
NO_CHKUPD=\[dq]n\[dq]
REPLACES=\[dq]test-v2\[dq]
OPTDEPENDS=\[dq]optional-dependency: This is a test optional dependency ;; optional-dependency-2: This is a second optional dependency.\[dq]
BUILD_DEPENDS=\[dq]testpackage5 testpackage6 testpackage10\[dq]
SHA256SUM=\[dq]e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855  testfile.tar.gz\[dq]
DESCRIPTION=\[dq]Test package\[dq]

prepare() {
    tar -xvf testfile.tar.gz
}

build() {
    cd testfile
    echo \[dq]Insert build instructions here\[dq]
}

check() {
    ninja -C build test
}

package() {
    cd testfile
    make install
}

package_test2() {
    cd testfile
    make install_test2
}

postinstall() {
    echo \[dq]Insert postinstall instructions here\[dq]
}
\f[R]
.fi
.PP
Now lets break it down.
.SS VARIABLES
.IP \[bu] 2
NAME: Name of your package.
Will show this name on the info command.
.IP \[bu] 2
VERSION: Version of your package.
It will be on the info command and updating it will result in kpkg
upgrading the package.
.IP \[bu] 2
RELEASE: Release of your package.
It will also be on the info command and updating it will result in kpkg
upgrading the package.
.IP \[bu] 2
SOURCES: Source URL\[cq]s of your package.
Can be seperated by `;' like \f[C]test.url;testurl2\f[R].
Also supports git URL\[cq]s as shown by the second source.
.IP \[bu] 2
DEPENDS: Dependencies of your package.
Seperated by space.
You can also specify versions for your dependencies such as
\f[C]test<=1.8.1\f[R], \f[C]test=1.8.1\f[R], \f[C]test>=1.8.1\f[R],
\f[C]test<1.8.1\f[R], \f[C]test>1.8.1\f[R].
.IP \[bu] 2
BUILD_DEPENDS: Build dependencies of your package.
Seperated by space.
.IP \[bu] 2
SHA256SUM: sha256sum output of the sources.
Should align with sources.
Can also be seperated by `;'.
Doesnt support git URL\[cq]s yet.
.IP \[bu] 2
DESCRIPTION: Description of the package.
It will be on the info command.
.SS FUNCTIONS
.IP \[bu] 2
build: The main function.
.IP \[bu] 2
package: The install function.
.SS OPTIONAL FUNCTIONS AND VARIABLES
.IP \[bu] 2
EPOCH: Only use this when the versioning logic fail for the package.
.IP \[bu] 2
prepare(): Files downloaded from SOURCES are extracted by default.
Use prepare() to prevent this and have custom prepare procedure.
.IP \[bu] 2
check(): Test the package.
.IP \[bu] 2
postinstall: Post-install function.
Will run after the package is installed.
.IP \[bu] 2
package_PACKAGENAME: Install function of PACKAGENAME.
With this function you can package multiple things in the same runfile.
This may be used for packaging sub-projects easier.
.IP \[bu] 2
NO_CHKUPD: Disables autoupdating thru chkupd.
False by default.
This will not prevent chkupd from building the package.
Will be enabled if it is one of these values; \[lq]y, yes, true, 1,
on\[rq]
.IP \[bu] 2
REPLACES: Replaces packages put in the variable.
Seperated by space.
.IP \[bu] 2
OPTDEPENDS: Optional dependencies for the package.
Seperated by `;;' like on the example.
.SH AUTHOR
.PP
Written by Kreato.
.SH COPYRIGHT
.PP
kpkg is free software: you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free
Software Foundation, either version 3 of the License, or (at your
option) any later version.
.PP
kpkg is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.
.PP
You should have received a copy of the GNU General Public License along
with kpkg.
If not, see <https://www.gnu.org/licenses/>.
